[build-system]
requires = ["setuptools>=61.0", "wheel", "pybind11>=3.0.0", "cmake>=3.18.0"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "geospatial-neural-adapter"
version = "0.6.0"
description = "Neural spatial modeling with low-rank spatial adapters"
authors = ["Wen-Ting Wang <egpivo@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "geospatial_neural_adapter", from = "."}]

[tool.poetry.dependencies]
python = "^3.10"
torch = "^2.0.0"
numpy = "^1.21.0"
scikit-learn = "^1.0.0"
optuna = "^3.0.0"
tqdm = "^4.60.0"
# TensorBoard 2.19.0 is compatible with TensorFlow 2.19.0
# TensorBoard 2.20.0+ has breaking changes that cause protobuf compatibility issues
# Protobuf 6.x is incompatible with TensorBoard 2.19.0 - need 4.x
tensorboard = "2.19.0"
protobuf = "4.25.3"
pandas = "^1.3.0"
cython = "^3.0.0"
    darts = "0.36.0"
    statsforecast = "2.0.2"

[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
isort = "^5.10.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
nbformat = "^5.10.4"


[project]
name = "geospatial-neural-adapter"
version = "0.6.0"
description = "Neural spatial modeling with low-rank spatial adapters"
authors = [{name = "Wen-Ting Wang", email = "egpivo@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "optuna>=3.0.0",
    "tqdm>=4.60.0",
    # TensorBoard 2.19.0 is compatible with TensorFlow 2.19.0
    # TensorBoard 2.20.0+ has breaking changes that cause protobuf compatibility issues
    # Protobuf 6.x is incompatible with TensorBoard 2.19.0 - need 4.x
    "tensorboard==2.19.0",
    "protobuf==4.25.3",
    "pandas>=1.3.0",
    "cython>=3.0.0",
    "darts==0.36.0",
    "statsforecast==2.0.2",
    "bumpversion>=0.6.0",
    "ipykernel (>=6.30.0,<7.0.0)",
    "seaborn (>=0.13.2,<0.14.0)",
]

# C++ Extensions configuration
[tool.setuptools]
packages = ["geospatial_neural_adapter", "geospatial_neural_adapter.models", "geospatial_neural_adapter.cpp_extensions"]

[tool.setuptools.package-data]
"geospatial_neural_adapter.cpp_extensions" = ["*.so"]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.10.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".git", "build", "dist", ".venv", "venv"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E902"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=geospatial_neural_adapter",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["geospatial_neural_adapter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
